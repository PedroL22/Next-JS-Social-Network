generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean    @default(false)
  bio           String?
  accounts      Account[]
  Comments      Comments[]
  Likes         Likes[]
  posts         Posts[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Posts {
  id           String     @id @default(cuid())
  text         String
  createdAt    DateTime   @default(now())
  email        String
  postComments Comments[]
  Likes        Likes[]
  User         User       @relation(fields: [email], references: [email], onDelete: Cascade)
}

model Comments {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  email     String
  postsId   String
  User      User     @relation(fields: [email], references: [email], onDelete: Cascade)
  Posts     Posts    @relation(fields: [postsId], references: [id], onDelete: Cascade)
  Likes     Likes[]
}

model Likes {
  id         String    @id @default(cuid())
  postsId    String?
  commentsId String?
  userId     String
  comments   Comments? @relation(fields: [commentsId], references: [id], onDelete: Cascade)
  posts      Posts?    @relation(fields: [postsId], references: [id], onDelete: Cascade)
  email      User      @relation(fields: [userId], references: [email], onDelete: Cascade)
  createdAt  DateTime  @default(now())
}
